<?php
$phpinc = $_SERVER["DOCUMENT_ROOT"] . '/../phpinc';
$smartydata = $_SERVER["DOCUMENT_ROOT"] . '/../smartydata';

require_once("$phpinc/geshi.php");
require_once("$phpinc/smarty/Smarty.class.php");

// init GeSHi
$geshi = new GeSHi();
$geshi->set_language('cpp');
$geshi->set_header_type(GESHI_HEADER_PRE_VALID);
$geshi->enable_classes();
$geshi->enable_line_numbers(GESHI_NORMAL_LINE_NUMBERS);
$geshi->set_overall_style('color: #0f0f0f; border: 1px solid #d0d0d0; background-color: #f8f8f8; width: 60em;', true);
$geshi->set_line_style('font: \'Courier New\', Courier, monospace;', 'font-weight: bold;', true);

// init Smarty
$smarty = new Smarty();
$smarty->setTemplateDir("$smartydata/templates");
$smarty->setCompileDir("$smartydata/templates_c");
$smarty->setCacheDir("$smartydata/cache");
$smarty->setConfigDir("$smartydata/configs");

// header
$smarty->assign('css', $geshi->get_stylesheet(true));
$smarty->assign('title', 'Lazy logging en C/C++');
$smarty->assign('subtitle', 'Utilisation avancée des sections en C/C++');
$smarty->assign('datetime', '2012');
$smarty->assign('articletime', 'Novembre 2012');
$smarty->display('header.tpl');
?>

<h3>Référencement des données de log via des indices</h3>

<p>Tous ces efforts nous ont permi de cloisonner tous nos pointeurs dans une seule et même section. Cette dernière peut alors être considérée comme un tableau de pointeurs. Connaissant l'adresse de base de ce tableau, il est facile de déduire l'indice d'un élément dans ce tableau à partir de son adresse :</p>
<pre>
    static const log_info_t * const log_info_ptr
    __attribute__((section(".logindx, \"r\"#"))) = &log_info;

    const unsigned char * base = GetSection(".logindx").baseAddr;
    unsigned short index = ((const unsigned char *)(&log_info_ptr) - base) / sizeof(log_info_ptr);
</pre>

<p>de même, à partir de l'adresse de base de la section <tt>.logindx</tt> et de sa taille virtuelle, il est facile
d'en déduire le nombre d'éléments contenus et de tous les itérer :</p>
<pre>
    const log_info_t **allElements = (const log_info_t **)GetSection(".logindx").baseAddr;
    size_t nbElements = GetSection(".logindx").virtualSize / sizeof(void*);
    for (size_t i = 0; i &lt; nbElements; ++i)
    {
        cout &lt;&lt; allElements[i].logMessage &lt;&lt "\n";
    }
</pre>

<p>De cette manière, il est possible d'utiliser cet indice comme base d'adressage des
<tt>log_info_t</tt>. Le nombres d'octets (et même de bits) utilisés pour stocker ces
index peut alors être librement défini selon les besoins. Dans le cadre de la bibliothèque
LogRoller, il a été décidé d'utiliser 16 bits (2 octets). Si cela venait à ne pas suffire
(parce qu'il y a plus de 65536 appels à log_xxx() dans le code source), la bibliothèque
s'en appercevrait immédiatement lors de son initialisation simplement en testant la taille
de la section <tt>.logindx</tt>. Cette dernière renseigne en effet directement sur le nombre de points
de logs présents dans le programme.
</p>

<p>On peut aller encore plus loin et utiliser plusieurs sections pour grouper les pointeurs
selon certains critères. Le premier critère qui vient à l'exprit est celui du niveau de log.
</p>
<p>On peut aussi envisager de ne pas placer les pointeurs dans une zone en lecture seule,
et de leur associer un compteur qui serait incrémenté chaque fois que ce pointeur est
référencé. De cette manière, il serait facile d'ordonner les points de logs selon leur fréquence
d'utilisation, et de là d'en dégager des "zones chaudes" du code source, à partir des noms de
fichiers et fonctions référencés par les pointeurs. Cela pourrait aussi permettre d'évaluer
la couverture du code.</p>
<p>Un autre utilisation possible des sections consiste à isoler tous les messages textes liés aux logs
dans une seule et même section. Cette section peut ensuite, via un outil adapté, être extraite (supprimée)
de l'exécutable. Ceci peut être justifié dans au moins deux cas concrets : 
</p>
<ul>
<li>Quand la taille est importante. Cela est particulièrement vrai dans le monde de l'embarqué :
plus c'est petit, mieux c'est&nbsp;! Et ce d'autant plus que ce n'est pas le code embarqué qui
va reformater les logs binaires en texte lisible. Il n'y a donc aucune raison d'y incorporer ces informations
potentiellement très volumineuses : 100 fichiers sources (noms complets de 50 caractères) x 10 fonctions
(noms de 15 caractères) x 2 messages (40 caractères) = ~100 Ko&nbsp;!</li>
<li>Quand on ne veut pas exposer la structure interne de l'application. Le fait que l'exécutable contienne
le nom des fichiers sources et surtout ceux des classes et fonctions qui le compose peut poser problème
dans le monde propriétaire où de telles informations sont souvent considérées comme confidentielles.
Permettre aux développeurs de bénificier de logs verbeux sans que l'application finale
ne contienne un seul nom de fichier ou de fonction est un gros avantage.</li>
</ul>
<p>Mais comment s'y prendre pour demander au compilateur de placer <u>toutes</u> les chaînes litérales spécifiques aux
messages de logs (en particulier celles résultant de l'expansion de __FILE__ et __FUNCTION__) et <u>uniquement
celles-ci</u> dans une autre section que la section .rdata par défaut ?</p>
<p>Cela ne semble pas possible d'une façon simple et facilement transposable à différents compilateurs.
Le mieux que semble offrir certains compilateurs est de changer la section à utiliser pour stocker 
les données initialisées (data_seg). Cette possibilité a le gros inconvénient d'être globale à toutes les
données constantes d'une unité de compilation.
Or nous ne devons pas seulement stocker les chaînes qui nous intéressent dans une section
à part, nous devons avant tout n'y stocker que ce qui concerne nos messages de logs. Autrement, en supprimant la dite
section, cela aurait de graves conséquences pour le reste du programme qui tenterait d'accéder au contenu d'une
section disparue.</p>
<p>Il est donc plus simple et plus sage de partir sur la base de ce qui a été déjà accompli, à savoir la possibilité
de stocker nos structures dans la section de notre choix. En modifiant légèrement notre structure, nous pouvons
lui faire incorporer directement les informations qui nous intéressent, au lieu de les référencer ailleurs :</p>
<pre>
struct log_info_t
{
    char fileName[256];
    unsigned int lineNumber;
    char functionName[124];
    char logMessage[128];
};
static const log_info_t log_info = {
    __FILE__,
    __LINE__,
    __FUNCTION__,
    "Hello World!"
};
</pre>
<p>Comme on peut le voir, l'utilisation reste la même, seule la déclaration change. Cette nouvelle approche
suscite les remarques suivantes :
</p>
<ul>
<li>La taille des structures est fixe, quelles que soient les longueurs des chaînes à stocker.
<p>Si elles sont toutes placées dans la même section, cette section sera donc équivalente à un tableau
de <tt>log_info_t</tt>, rendant possible le référencement d'une structure non pas via son adresse (virtuelle
ou relative) mais par son emplacement (index) dans ce tableau. C'est le mécanisme optimal d'adressage de ces structures
(comme vu dans le paragraphe <a href="#reduction-adresses-memoire">Réduction de la taille des adresses mémoires référencées</a>)</p></li>
<li>En conséquences, la mémoire nécessaire au stockage est beaucoup plus importante.
<p>La taille des structures étant indépendante de celle des chaînes à stocker, il en résulte une consommation
de place beaucoup plus importante que nécessaire (chaque message de log
fait grossir l'exécutable final de 512 octets dans cet exemple). Cela est à relativiser par le fait que 
tout cet espace est destiné à être retiré de l'exécutable une fois celui-ci généré, et que cela
rend aussi possible le parcours de tous les <tt>log_info_t</tt> contenus dans cette espace dédié.
En revanche, le développeur qui n'est pas intéressé par ces possibilités et souhaite conserver le contenu des messages
de log au sein de son programme est fortement pénalisé. Sans parler de celui qui souhaite enregistrer des messages
(et noms de fichiers) au format Unicode&nbsp;!</p></li>
<li>Que se passe-t-il si l'une des chaînes fournies à l'initialisation dépasse la capacité de la strcuture ?
<p>La bonne nouvelle est que le compilateur s'en apperçoit et produit un message d'erreur (error C2117).
La mauvaise nouvelle est que la bibliothèque de logs peut faire échouer la compilation du code utilisateur,
et forcer ce dernier à modifier le message qu'il souhaite logger. Autrement dit, il est potentiellement bridé
par des choix qui relèvent du détail d'implémentation de la bibliothèque.</p></li>
</ul>
<p>Les deux derniers points sont la cause d'un choix délicat et finalement arbitraire en ce qui concerne
la taille maximale autorisée pour les messages statiques. Pour ne pas brider inutilement l'utilisateur,
on est tenté de mettre des limites élevées. Mais cela impacte directement l'espace mémoire (inutilement)
alloué et donc la pénalité envers l'utilisateur qui ne souhaite pas se compliquer la vie en retirant les
messages de logs de son exécutable.</p>

<p>Face à tous ces inconvénients, l'avantage d'un adressage par index a été jugé insuffisant, d'autant
plus qu'il est possible d'y parvenir en introduisant une variable statique supplémentaire. Une autre approche a donc été
développée.</p>

<h3>Stockage optimal des messages statiques dans une section dédiée</h3>
<p>Le choix technique qui a été fait est illustré par l'exemple suivant :</p>
<pre>
void print_log_info(const char *log_info)
{
    size_t offset = 0;
    string logMessage = log_info[offset];
    
    offset += logMessage.size() + 1; 
    string fileName = log_info[offset];
    
    offset += fileName.size() + 1; 
    string functionName = log_info[offset];
    
    cout &lt;&lt; "(" &lt;&lt; fileName &lt;&lt; ") ["
        &lt;&lt; functionName &lt;&lt; "] "
        &lt;&lt; logMessage &lt;&lt; endl; 
}
 
int main()
{
    static const char log_info[] = "Hello World!" "\0" __FILE__ "\0" __FUNCTION__;
    print_log_info(log_info);    
}
</pre>
<p>L'astuce est très simple : on utilise la capacité du préprocesseur à concaténer
des chaînes de caractères pour générer une seule chaîne contenant toutes les informations
données.</p>
<p>A une exception près : le numéro de ligne.</p>

<hr />
<h1>Eléments d'une syntaxe conviviale</h1>
<p>La possibilité d'ajouter à la suite de notre macro un nombre variables d'arguments
est un élément important d'une syntaxe conviviale :
</p>
<pre>
log_info("Hello") &lt;&lt; " World" &lt;&lt; '!';
</pre>
<p>Sachant que nous ne sommes pas satisfait de l'approche classique qui consiste à utiliser
un double parenthésage au sein même de la macro :</p>
<pre>
log_info(("Hello" &lt;&lt; " World" &lt;&lt; '!'));
</pre>

<p>mettre en oeuvre de manière fiable la syntaxe souhaitée pose un challenge technique,
notament à cause du cas d'utilisation suivant :</p>
<pre>
void test_macro(int n)
{
    if (n == 0)
       log_info("n est nul\n");
    else
        log_info("n == ") &lt;&lt; n &lt;&lt; "\n";
    
    for (int i = 0; i &lt; n; ++i)
        log_info("i = ") &lt;&lt; i &lt;&lt; "\n";
}
</pre>
<p>C'est un problème classique lié à l'utilisation des macros : celui de leur appel depuis un <tt class="keyw">if</tt>.</p>
<p>Si l'on respecte les recommandations à ce sujet, notre macro devra ressembler à ceci :</p>
<pre>
#define log_info(msg)\
    if (false) {} else { static const char info[] = msg __FILE__; std::cout &lt;&lt; msg; }
</pre>
<p>Cette approche sécurise bien l'utilisation de notre macro, mais est incompatible avec
le chaînage des arguments (comme pour afficher les valeurs de <tt>n</tt> et <tt>i</tt>
ci-dessus).</p>
<p>A l'inverse, ne pas suivre ces recommandations comme dans cet exemple :</p> 
<pre>
std::ostream & print_log_info(const char * log_info);

#define log_info(msg)\
    static const char info[] = msg "\0" __FILE__ "\0" __FUNCTION__;\
    print_log_info(info)

if (n == 0)
    log_info("n est nul");
</pre>
<p>va produire une erreur de compilation car elle sera expansée ainsi :<p>
<pre>
if (n == 0)
    static const char info[] = "n est nul" "\0" __FILE__ "\0" __FUNCTION__;
print_log_info(info);
</pre>
<p>Ce qui restreint la portée de <tt>info</tt> au <tt class="keyw">if</tt> et cause donc une erreur de compilation
à la ligne suivante.</p>
<p>On peut alors être tenté de tout simplifier ainsi :</p>
<pre>
#define log_info(msg)\
    print_log_info( msg "\0" __FILE__ "\0" __FUNCTION__ )

if (n == 0)
    log_info("n est nul");
else
    log_info("n = ") &lt;&lt; n;
</pre>
<p>Mais on perd alors la possibilité de placer notre message dans la section de notre choix.
Pour conserver cette possibilité, nous somme obligés de d'abord déclarer notre message en <tt class="keyw">static</tt>,
et c'est là la source de nos difficultés.</p>
<p>En explorant les solutions possibles, j'ai d'abord été très enthousiaste de découvrir que la syntaxe
suivante fontionne sous Visual C++ 2010 :</p>
<pre>
#pragma section(".logindx", read)

if (__declspec(allocate(".logindx"))
    static const char log_info[] = "Hello World!" "\0" __FILE__ "\0" __FUNCTION__
    )
    print_log_info(log_info) &lt;&lt; " World!\n";
</pre>
<p>Etrangement, alors le compilateur accepte cette syntaxe sans sourciller, l'Intellisense de l'éditeur
s'en plaint :</p>
<img src="vc2010.png" />
<p>Et MingW vient confirmer que cette syntaxe n'est pas légale : <tt class="keyw">static</tt> n'est pas autorisé
dans une expression <tt class="keyw">if</tt>.</p>
<p>Par contre, la norme l'autorise dans une expression <tt class="keyw">for</tt> :</p>
<pre>
    for (static const char log_info[] = "Hello" "\0" __FILE__ "\0" __FUNCTION__;
         ;
         )
         print_log_info(log_info) &lt;&lt; " World!";
</pre>
<p>Mais cela empêche de déclarer une seconde variable locale (non statique) nécessaire au contrôle de la structure <tt class="keyw">for</tt>
(qui ne doit s'exécuter qu'une seule fois). Heureusement il est possible de s'en sortir
en déclarant cette variable dans un <tt class="keyw">if</tt> supérieur, ce qui au passage nous permet de protéger
notre macro comme le recommande les bonnes pratiques :</p>
<pre>
    if (bool logged = false) {}
    else for (static const char log_info[] = "Hello" "\0" __FILE__ "\0" __FUNCTION__;
              logged == false;
              logged = true)
              print_log_info(log_info) &lt;&lt; " World!";
</pre>
<p>Le <tt class="keyw">if</tt> cumule ainsi deux fonctions indépendantes, ce qui est généralement le signe d'un design efficace.</p> 
<p>Nous pouvons donc rédiger notre macro finale :</p>
<pre>
class ostream_wrapper
{
public:
    ostream_wrapper(std::ostream & s) : s_(s)
    {
    }
    
    ~ostream_wrapper()
    {
        s_ &lt;&lt; "\n";
    }
    
    template&lt;typename T&gt;
    ostream_wrapper & operator&lt;&lt;(T t)
    {
        s_ &lt;&lt; " " &lt;&lt; t;
        return *this;         
    }
    
private:
    ostream_wrapper s_;
};

ostream_wrapper print_log_info(const char * log_info);

#define log_info(msg)\
        if (bool logged = false) {}\
        else for (PLACE_IN_LOGROLLER_SECTION(static const char log_info[]) =\
                      msg "\0" __FILE__ "\0" __FUNCTION__;\
                  logged == false;\
                  logged = true)\
                  print_log_info(log_info)

void test_macro(int n)
{
    if (n == 0)
        log_info("n est nul");
    else
        log_info("n == ") &lt;&lt; n;

    for (int i = 0; i &lt; n; ++i)
        log_info("* i == ") &lt;&lt; i;
}

ostream_wrapper print_log_info(const char * log_info)
{
    size_t offset = 0;
    string logMessage = &log_info[offset];
    
    offset += logMessage.size() + 1; 
    string fileName = &log_info[offset];
    
    offset += fileName.size() + 1; 
    string functionName = &log_info[offset];
    
    cout &lt;&lt; "(" &lt;&lt; fileName &lt;&lt; ") ["
        &lt;&lt; functionName &lt;&lt; "] "
        &lt;&lt; logMessage;
        
    return ostream_wrapper(std::cout); 
}

int main(int argc, char **argv)
{
    test_macro(0);
    test_macro(1);
    test_macro(2);
}
</pre>
<p>Qui fonctionne parfaitement et n'est source d'aucun warning même en niveau maximum.</p>
<p>Du côté des performances, comme on pouvait l'anticiper, le compilateur est parfaitement
capable de supprimer la structure du <tt class="keyw">if</tt> et du <tt class="keyw">for</tt> pour appeler directement
<tt>print_log_info()</tt> (lorsque l'optimisation du code est activée). En clair, il n'y a absolument
aucun surcoût (en Release) à protéger ainsi l'utilisation de la macro.</p>
</div>

<hr />
<h2>Chargement d'un programme en mémoire</h2>

<p>Nous avons constaté que les chaînes de caractères litérales d'un programme C/C++ sont en général
toujours situées à la même adresse mémoire d'une exécution à l'autre. Mais est-ce systématique ?
</p>

<p>La réponse est non. En théorie, leur emplacement mémoire peut varier d'une exécution à l'autre. En pratique, cela n'arrive pas dans le cas des fichiers exécutables (.exe), mais est très fréquent avec les bibliothèques dynamiques partagées (.dll/.so).</p>

<h3>Sous Windows</h3>

<p>Ces fichiers sont structurés en différentes sections qui compartimentent le code exécutable à proprement parler,
les données initialisées modifiables, les données initialisées constantes, etc.
C'est l'éditeur de liens qui va créer ces sections et les agencer comme il le souhaite, et c'est
le système d'exploitation qui va les charger en mémoire lors de la création d'un nouveau processus.</p>

<p>L'éditeur de liens a déjà défini la disposition relative des sections en mémoire, ainsi qu'une adresse
de base préférentielle. Traditionnellement, sous Windows 32 bits, les exécutables sont chargés à l'adresse
de base 0x400000. Cette valeur est renseignée dans un des nombreux champs du fichier PE.
Les sections présentes vont ensuite être disposées par rapport à cette adresse de base.
Par exemple, si la section .text est renseignée avec l'adresse relative 0x1000, et que l'adresse de base
du fichier en mémoire est 0x400000, alors son adresse finale en mémoire sera 0x400000 + 0x1000 = 0x401000.</p> 

<p>Dans l'exemple, la chaîne de caractère se trouve à l'adresse 0x47702B.
Sachant que le fichier .exe a été chargé à l'adresse de base 0x400000, l'adresse relative de la chaîne
<i>Hello World!</i> est donc : 0x47702B - 0x400000 = 0x7702B.
Si l'on ouvre ce fichier .exe dans un éditeur de fichiers PE, on peut vérifier que cette adresse relative
se situe dans la section .rdata, c'est à dire la section des données initialisées en lecture seule.
C'est dans cette section que les variables const statiques sont placées par l'éditeur de liens de mingw.
C'est aussi le cas avec Visual C++ ?</p> 

<p>Les adresse relatives sont donc constantes, seule l'adresse de base à laquelle elles sont chargées est
fluctuante. Ainsi, lors de sa deuxième exécution dans notre exemple précédent, si l'exécutable
était hypothétiquement chargé à l'adresse 0x500000 au lieu du 0x400000 précédent, alors notre chaîne <i>Hello World!</i>
ne serait plus en 0x47702b mais en 0x57702b, et il en résulterait une gros problème pour son affichage.
C'est quelque chose qui ne se produit normalement pas avec des .exe, mais qui n'est pas exceptionnel dans le cas
des dlls.
Une dll pouvant être chargée par plusieurs .exe différents, qui eux-mêmes chargent d'autres dlls, il se peut
qu'une autre dll occupe déjà une partie du créneau mémoire qu'elle avait spécifié via son adresse de base
préférentielle. Elle sera alors relogée, c'est à dire chargée à un autre endroit, et l'adresse de ses chaînes
de caratères littérales sera donc décalée.</p>

<p>Mais si on connait l'adresse de base de la dll, on peut en déduire l'adresse relative de la chaîne selon
le même principe. Il sera alors facile de retrouver l'adresse réelle de la chaîne même si la dll est
chargée à une adresse de base différente. Qu'en est-il de l'impact de l'<acronym title="Address Space
Layout Randomization">ASLR</acronym> ?
</p>

<h3>Détecter si une chaîne est littérale à partir de son adresse (C/C++)</h3>
<p>Nous avons vu que les chaînes littérales sont stockées dans une section bien spécifique du conteneur exécutable.
Il est tout à fait possible de localiser dynamiquement où elle se trouve précisément en mémoire. A partir de là,
déterminer si une chaîne (ou n'importe quelle donnée initialisée en fait) est contenue dans l'exécutable ou non
est très facile : cela se réduit à deux comparaisons de l'adresse de cette chaîne, avec l'adresse de début et l'adresse
de fin de la section en mémoire.</p>
<p>Cette méthode est très fiable car on est alors certain que l'adresse référencée est consultable ultérieurement.
En revanche, il n'y a pas de façon portable d'implémenter cela car la méthode est spécifique à chaque type de format
d'exécutable (PE pour Windows, ELF pour Linux, MachO pour MacOS X).</p>

<h3>Détecter si une chaîne est littérale grace aux templates (C++ uniquement)</h3>
<p>Une chaîne littérale étant un tableau de char dont la longueur est connue lors de la compilation, il est possible
d'en connaître la longueur grâce à la déduction automatique des arguments des templates :
</p>
<pre>
template&lt;typename T, size_t N&gt;
inline size_t length_of(T (&arr)[N])
{
    return N;
}

size_t n = length_of("12345"); // n == 6
</pre>

<p>Les programmeurs C savent obtenir la même information via <tt class="keyw">sizeof</tt> :</p>
<pre>
#define length_of(str) sizeof(str) / sizeof(*str)

size_t n = length_of("12345"); // n == 6
</pre>
<p>Malheureusement cette approche ne permet pas de distinguer un pointeur sur une chaîne de caractère
d'une chaîne littérale passée directement :
<pre>
#define length_of(str) sizeof(str) / sizeof(*str)

const char *str = "12345";
size_t n = length_of("str"); // n == 4
</pre>
<p>En effet, sur une machine 32 bits, <tt class="keyw">sizeof(const char *)</tt> renvoie 4.</p>
<p>A l'inverse, la surcharge de fonctions en C++ permet de dsitinguer les deux cas d'appel :</p>
<pre>
template&lt;size_t N&gt;
void length_of(const char (&str)[N])
{
    cout &lt;&lt; "Litteral, length = " &lt;&lt; N &lt;&lt; "\n";
}

void length_of(const char *&str)
{
    cout &lt;&lt; "Non litteral, length = " &lt;&lt; strlen(str) + 1 &lt;&lt; "\n";
}

int main(int argc, char **argv)
{
    length_of("12345");
    
    const char *str = "12345";
    length_of(str);

    const char str2[] = "12345";
    length_of(str2);
}
</pre>
<pre>Litteral, length = 6
Non litteral, length = 6
Litteral, length = 6</pre>

<p>Malheureusement, comme l'exemple ci-dessus le montre, un tableau local initialisé sur la pile sera
un bon candidat pour la version template. Et parce que son contenu se trouve sur la pile, il sera perdu
dès que la fonction se terminera. Dans ce cas précis, logger l'adresse de la chaîne de caractère serait
un problème, car il serait impossible de récupérer sa valeur ultérieurement.</p>
<p>Mais un tel cas d'utilisation reste rare, surtout si la variable est constante. En général, elle ne l'est pas :</p>
<pre>
template&lt;size_t N&gt;
void length_of(const char (&str)[N])
{
    cout &lt;&lt; "Litteral, length = " &lt;&lt; N &lt;&lt; "\n";
}

template&lt;size_t N&gt;
void length_of(char (&str)[N])
{
    cout &lt;&lt; "Non litteral, length = " &lt;&lt; N &lt;&lt; "\n";
}

int main(int argc, char **argv)
{
    length_of("12345");
    
    char str[] = "12345";
    length_of(str);
}
</pre>
<pre>
Litteral, length = 6
Non litteral, length = 6
</pre>
<p>Cette approche, bien qu'imparfaite, reste donc intéressante car elle est simple et portable. Elle constitue
une alternative acceptable à la détection à partir de l'adresse.</p>

<?php
// footer
$smarty->display('footer.tpl');
?>
